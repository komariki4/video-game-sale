import streamlit as st
import pandas as pd
import numpy as np
import joblib
import warnings
from datetime import datetime

warnings.filterwarnings('ignore')

st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏—Ä–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ –≤–∏–¥–µ–æ–∏–≥—Ä",
    page_icon="üéÆ",
    layout="wide"
)

ALL_PLATFORMS = ['Wii', 'NES', 'GB', 'DS', 'X360', 'PS3', 'PS2', 'SNES', 'GBA', '3DS', 'PS4', 'N64', 'PS', 'XB', 'PC', '2600', 'PSP', 'XOne', 'GC', 'WiiU', 'GEN', 'DC', 'PSV', 'SAT', 'SCD', 'WS', 'NG', 'TG16', '3DO', 'GG', 'PCFX']
ALL_GENRES = ['Sports', 'Platform', 'Racing', 'Role-Playing', 'Puzzle', 'Misc', 'Shooter', 'Simulation', 'Action', 'Fighting', 'Adventure', 'Strategy']

TOP_PLATFORMS = ['PS2', 'X360', 'PS3', 'Wii', 'DS']
TOP_GENRES = ['Action', 'Sports', 'Shooter']
TOP_PUBLISHERS = ['Nintendo', 'Electronic Arts', 'Activision Blizzard', 'Sony Computer Entertainment', 'Sony Interactive Entertainment ',
                 'Ubisoft', 'Take-Two Interactive', 'Sega', 'Square Enix', 'Microsoft Game Studios', 'Bethesda Softworks']

@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    try:
        model = joblib.load('best_xgb.joblib')
        st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

def prepare_features(input_data):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏—á–µ–π –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏"""
    try:
        df = pd.DataFrame([input_data])
        
        current_year = datetime.now().year
        df['Age'] = current_year - df['Year']
        df['is_mainstream_platform'] = df['Platform'].isin(TOP_PLATFORMS).astype(int)
        df['is_popular_genre'] = df['Genre'].isin(TOP_GENRES).astype(int)
        
        df['Publisher'] = df['Publisher'].apply(
            lambda x: x if x in TOP_PUBLISHERS else 'Other')
        df['is_AAA_publisher'] = df['Publisher'].isin(
            ['Electronic Arts', 'Nintendo', 'Activision']).astype(int)
        
        for col in ['Platform', 'Genre', 'Publisher']:
            dummies = pd.get_dummies(df[col], prefix=col)
            df = pd.concat([df, dummies], axis=1)
        
        df = df.drop(['Platform', 'Genre', 'Publisher', 'Name'], axis=1, errors='ignore')
        
        return df
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def predict_sales(model, input_data):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"""
    try:
        df_processed = prepare_features(input_data)
        
        if df_processed is None:
            return None
            
        expected_features = model.feature_names_in_
        
        for feature in expected_features:
            if feature not in df_processed.columns:
                df_processed[feature] = 0
        
        df_processed = df_processed[expected_features].astype(float)
        
        log_prediction = model.predict(df_processed)[0]
        
        prediction = np.expm1(log_prediction)
        
        return round(prediction, 2)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")
        return None

def main():
    st.title("üéÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏—Ä–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ –≤–∏–¥–µ–æ–∏–≥—Ä")
    st.markdown("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–∏—Ä–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂")
    
    model = load_model()
    if model is None:
        st.stop()
    
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã")
    
    st.sidebar.subheader("üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    platform = st.sidebar.selectbox("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", options=ALL_PLATFORMS)
    genre = st.sidebar.selectbox("–ñ–∞–Ω—Ä", options=ALL_GENRES)
    
    publisher = st.sidebar.selectbox(
        "–ò–∑–¥–∞—Ç–µ–ª—å", 
        options=TOP_PUBLISHERS + ['–î—Ä—É–≥–æ–π'],
        index=0
    )
    
    if publisher == '–î—Ä—É–≥–æ–π':
        publisher = st.sidebar.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–∞—Ç–µ–ª—è (–∞–Ω–≥–ª.)", 
            max_chars=50,
            help="–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–∞—Ç–µ–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"
        )
        if not publisher:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–∞—Ç–µ–ª—è")
            st.stop()
    
    st.sidebar.subheader("üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞")
    year = st.sidebar.slider(
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", 
        min_value=1980, 
        max_value=datetime.now().year, 
        value=2010
    )
    
    if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏", type="primary"):
        input_data = {
            'Platform': platform,
            'Genre': genre,
            'Publisher': publisher,
            'Year': year,
            'Name': 'User Input'  
        }
        
        with st.spinner("–í—ã—á–∏—Å–ª—è—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ..."):
            predicted_sales = predict_sales(model, input_data)
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.subheader("–í–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            params = {
                "–ü–∞—Ä–∞–º–µ—Ç—Ä": ["–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–ñ–∞–Ω—Ä", "–ò–∑–¥–∞—Ç–µ–ª—å", "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [platform, genre, publisher, str(year)]
            }
            st.table(pd.DataFrame(params))
        
        with col2:
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
            if predicted_sales is not None:
                st.metric(
                    label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –º–∏—Ä–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏",
                    value=f"{predicted_sales} –º–ª–Ω –∫–æ–ø–∏–π",
                )
                st.info(f"–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ {predicted_sales * 1000000:,.0f} –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∫–æ–ø–∏–π")
                
                with st.expander("–î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
                    st.markdown(f"""
                    - **–í–æ–∑—Ä–∞—Å—Ç –∏–≥—Ä—ã**: {datetime.now().year - year} –ª–µ—Ç
                    - **–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞**: {"–î–∞" if platform in TOP_PLATFORMS else "–ù–µ—Ç"}
                    - **–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∂–∞–Ω—Ä**: {"–î–∞" if genre in TOP_GENRES else "–ù–µ—Ç"}
                    - **–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∏–∑–¥–∞—Ç–µ–ª—å**: {"–î–∞" if publisher in ['Electronic Arts', 'Nintendo', 'Activision'] else "–ù–µ—Ç"}
                    """)
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

if __name__ == "__main__":
    main()